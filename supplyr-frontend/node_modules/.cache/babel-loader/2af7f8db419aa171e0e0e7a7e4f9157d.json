{"ast":null,"code":"(function () {\n  var $D = Date;\n  /**\r\n   * @desc Converts the specified string value into its JavaScript Date equivalent using CultureInfo specific format information.\r\n   * \r\n   * Example\r\n  <pre><code>\r\n  ///////////\r\n  // Dates //\r\n  ///////////\r\n  \n  // 15-Oct-2004\r\n  var d1 = Date.parse(\"10/15/2004\");\r\n  \n  // 15-Oct-2004\r\n  var d1 = Date.parse(\"15-Oct-2004\");\r\n  \n  // 15-Oct-2004\r\n  var d1 = Date.parse(\"2004.10.15\");\r\n  \n  //Fri Oct 15, 2004\r\n  var d1 = Date.parse(\"Fri Oct 15, 2004\");\r\n  \n  ///////////\r\n  // Times //\r\n  ///////////\r\n  \n  // Today at 10 PM.\r\n  var d1 = Date.parse(\"10 PM\");\r\n  \n  // Today at 10:30 PM.\r\n  var d1 = Date.parse(\"10:30 P.M.\");\r\n  \n  // Today at 6 AM.\r\n  var d1 = Date.parse(\"06am\");\r\n  \n  /////////////////////\r\n  // Dates and Times //\r\n  /////////////////////\r\n  \n  // 8-July-2004 @ 10:30 PM\r\n  var d1 = Date.parse(\"July 8th, 2004, 10:30 PM\");\r\n  \n  // 1-July-2004 @ 10:30 PM\r\n  var d1 = Date.parse(\"2004-07-01T22:30:00\");\r\n  \n  ////////////////////\r\n  // Relative Dates //\r\n  ////////////////////\r\n  \n  // Returns today's date. The string \"today\" is culture specific.\r\n  var d1 = Date.parse(\"today\");\r\n  \n  // Returns yesterday's date. The string \"yesterday\" is culture specific.\r\n  var d1 = Date.parse(\"yesterday\");\r\n  \n  // Returns the date of the next thursday.\r\n  var d1 = Date.parse(\"Next thursday\");\r\n  \n  // Returns the date of the most previous monday.\r\n  var d1 = Date.parse(\"last monday\");\r\n  \n  // Returns today's day + one year.\r\n  var d1 = Date.parse(\"next year\");\r\n  \n  ///////////////\r\n  // Date Math //\r\n  ///////////////\r\n  \n  // Today + 2 days\r\n  var d1 = Date.parse(\"t+2\");\r\n  \n  // Today + 2 days\r\n  var d1 = Date.parse(\"today + 2 days\");\r\n  \n  // Today + 3 months\r\n  var d1 = Date.parse(\"t+3m\");\r\n  \n  // Today - 1 year\r\n  var d1 = Date.parse(\"today - 1 year\");\r\n  \n  // Today - 1 year\r\n  var d1 = Date.parse(\"t-1y\"); \r\n  \n  \n  /////////////////////////////\r\n  // Partial Dates and Times //\r\n  /////////////////////////////\r\n  \n  // July 15th of this year.\r\n  var d1 = Date.parse(\"July 15\");\r\n  \n  // 15th day of current day and year.\r\n  var d1 = Date.parse(\"15\");\r\n  \n  // July 1st of current year at 10pm.\r\n  var d1 = Date.parse(\"7/1 10pm\");\r\n  </code></pre>\r\n   *\r\n   * @param {String}   The string value to convert into a Date object [Required]\r\n   * @return {Date}    A Date object or null if the string cannot be converted into a Date.\r\n   */\n\n  var parseUtils = {\n    removeOrds: function (s) {\n      ords = s.match(/\\b(\\d+)(?:st|nd|rd|th)\\b/); // find ordinal matches\n\n      s = ords && ords.length === 2 ? s.replace(ords[0], ords[1]) : s;\n      return s;\n    },\n    grammarParser: function (s) {\n      var r = null;\n\n      try {\n        r = $D.Grammar.start.call({}, s.replace(/^\\s*(\\S*(\\s+\\S+)*)\\s*$/, \"$1\"));\n      } catch (e) {\n        return null;\n      }\n\n      return r[1].length === 0 ? r[0] : null;\n    },\n    nativeFallback: function (s) {\n      var t;\n\n      try {\n        // ok we haven't parsed it, last ditch attempt with the built-in parser.\n        t = Date._parse(s);\n        return t || t === 0 ? new Date(t) : null;\n      } catch (e) {\n        return null;\n      }\n    }\n  };\n\n  function parse(s) {\n    var d;\n\n    if (!s) {\n      return null;\n    }\n\n    if (s instanceof Date) {\n      return s.clone();\n    }\n\n    if (s.length >= 4 && s.charAt(0) !== \"0\" && s.charAt(0) !== \"+\" && s.charAt(0) !== \"-\") {\n      // ie: 2004 will pass, 0800 won't.\n      //  Start with specific formats\n      d = $D.Parsing.ISO.parse(s) || $D.Parsing.Numeric.parse(s);\n    }\n\n    if (d instanceof Date && !isNaN(d.getTime())) {\n      return d;\n    } else {\n      // find ordinal dates (1st, 3rd, 8th, etc and remove them as they cause parsing issues)\n      s = $D.Parsing.Normalizer.parse(parseUtils.removeOrds(s));\n      d = parseUtils.grammarParser(s);\n\n      if (d !== null) {\n        return d;\n      } else {\n        return parseUtils.nativeFallback(s);\n      }\n    }\n  }\n\n  if (!$D._parse) {\n    $D._parse = $D.parse;\n  }\n\n  $D.parse = parse;\n\n  Date.getParseFunction = function (fx) {\n    var fns = Date.Grammar.allformats(fx);\n    return function (s) {\n      var r = null;\n\n      for (var i = 0; i < fns.length; i++) {\n        try {\n          r = fns[i].call({}, s);\n        } catch (e) {\n          continue;\n        }\n\n        if (r[1].length === 0) {\n          return r[0];\n        }\n      }\n\n      return null;\n    };\n  };\n  /**\r\n   * Converts the specified string value into its JavaScript Date equivalent using the specified format {String} or formats {Array} and the CultureInfo specific format information.\r\n   * The format of the string value must match one of the supplied formats exactly.\r\n   * \r\n   * Example\r\n  <pre><code>\r\n  // 15-Oct-2004\r\n  var d1 = Date.parseExact(\"10/15/2004\", \"M/d/yyyy\");\r\n  \n  // 15-Oct-2004\r\n  var d1 = Date.parse(\"15-Oct-2004\", \"M-ddd-yyyy\");\r\n  \n  // 15-Oct-2004\r\n  var d1 = Date.parse(\"2004.10.15\", \"yyyy.MM.dd\");\r\n  \n  // Multiple formats\r\n  var d1 = Date.parseExact(\"10/15/2004\", [\"M/d/yyyy\", \"MMMM d, yyyy\"]);\r\n  </code></pre>\r\n   *\r\n   * @param {String}   The string value to convert into a Date object [Required].\r\n   * @param {Object}   The expected format {String} or an array of expected formats {Array} of the date string [Required].\r\n   * @return {Date}    A Date object or null if the string cannot be converted into a Date.\r\n   */\n\n\n  $D.parseExact = function (s, fx) {\n    return $D.getParseFunction(fx)(s);\n  };\n})();","map":{"version":3,"sources":["/Users/keeganfinegan/Documents/2021/SoftwareDevelopment/Assignment/supplyr-frontend/node_modules/datejs/src/core/parser.js"],"names":["$D","Date","parseUtils","removeOrds","s","ords","match","length","replace","grammarParser","r","Grammar","start","call","e","nativeFallback","t","_parse","parse","d","clone","charAt","Parsing","ISO","Numeric","isNaN","getTime","Normalizer","getParseFunction","fx","fns","allformats","i","parseExact"],"mappings":"AAAC,aAAY;AACZ,MAAIA,EAAE,GAAGC,IAAT;AAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACC,MAAIC,UAAU,GAAG;AAChBC,IAAAA,UAAU,EAAE,UAAUC,CAAV,EAAa;AACxBC,MAAAA,IAAI,GAAGD,CAAC,CAACE,KAAF,CAAQ,0BAAR,CAAP,CADwB,CACoB;;AAC5CF,MAAAA,CAAC,GAAKC,IAAI,IAAIA,IAAI,CAACE,MAAL,KAAgB,CAAzB,GAA8BH,CAAC,CAACI,OAAF,CAAUH,IAAI,CAAC,CAAD,CAAd,EAAmBA,IAAI,CAAC,CAAD,CAAvB,CAA9B,GAA4DD,CAAjE;AACA,aAAOA,CAAP;AACA,KALe;AAMhBK,IAAAA,aAAa,EAAE,UAAUL,CAAV,EAAa;AAC3B,UAAIM,CAAC,GAAG,IAAR;;AACA,UAAI;AACHA,QAAAA,CAAC,GAAGV,EAAE,CAACW,OAAH,CAAWC,KAAX,CAAiBC,IAAjB,CAAsB,EAAtB,EAA0BT,CAAC,CAACI,OAAF,CAAU,wBAAV,EAAoC,IAApC,CAA1B,CAAJ;AACA,OAFD,CAEE,OAAOM,CAAP,EAAU;AACX,eAAO,IAAP;AACA;;AAED,aAASJ,CAAC,CAAC,CAAD,CAAD,CAAKH,MAAL,KAAgB,CAAjB,GAAsBG,CAAC,CAAC,CAAD,CAAvB,GAA6B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","sourcesContent":["(function () {\r\n\tvar $D = Date;\r\n\r\n\t/**\r\n\t * @desc Converts the specified string value into its JavaScript Date equivalent using CultureInfo specific format information.\r\n\t * \r\n\t * Example\r\n\t<pre><code>\r\n\t///////////\r\n\t// Dates //\r\n\t///////////\r\n\r\n\t// 15-Oct-2004\r\n\tvar d1 = Date.parse(\"10/15/2004\");\r\n\r\n\t// 15-Oct-2004\r\n\tvar d1 = Date.parse(\"15-Oct-2004\");\r\n\r\n\t// 15-Oct-2004\r\n\tvar d1 = Date.parse(\"2004.10.15\");\r\n\r\n\t//Fri Oct 15, 2004\r\n\tvar d1 = Date.parse(\"Fri Oct 15, 2004\");\r\n\r\n\t///////////\r\n\t// Times //\r\n\t///////////\r\n\r\n\t// Today at 10 PM.\r\n\tvar d1 = Date.parse(\"10 PM\");\r\n\r\n\t// Today at 10:30 PM.\r\n\tvar d1 = Date.parse(\"10:30 P.M.\");\r\n\r\n\t// Today at 6 AM.\r\n\tvar d1 = Date.parse(\"06am\");\r\n\r\n\t/////////////////////\r\n\t// Dates and Times //\r\n\t/////////////////////\r\n\r\n\t// 8-July-2004 @ 10:30 PM\r\n\tvar d1 = Date.parse(\"July 8th, 2004, 10:30 PM\");\r\n\r\n\t// 1-July-2004 @ 10:30 PM\r\n\tvar d1 = Date.parse(\"2004-07-01T22:30:00\");\r\n\r\n\t////////////////////\r\n\t// Relative Dates //\r\n\t////////////////////\r\n\r\n\t// Returns today's date. The string \"today\" is culture specific.\r\n\tvar d1 = Date.parse(\"today\");\r\n\r\n\t// Returns yesterday's date. The string \"yesterday\" is culture specific.\r\n\tvar d1 = Date.parse(\"yesterday\");\r\n\r\n\t// Returns the date of the next thursday.\r\n\tvar d1 = Date.parse(\"Next thursday\");\r\n\r\n\t// Returns the date of the most previous monday.\r\n\tvar d1 = Date.parse(\"last monday\");\r\n\r\n\t// Returns today's day + one year.\r\n\tvar d1 = Date.parse(\"next year\");\r\n\r\n\t///////////////\r\n\t// Date Math //\r\n\t///////////////\r\n\r\n\t// Today + 2 days\r\n\tvar d1 = Date.parse(\"t+2\");\r\n\r\n\t// Today + 2 days\r\n\tvar d1 = Date.parse(\"today + 2 days\");\r\n\r\n\t// Today + 3 months\r\n\tvar d1 = Date.parse(\"t+3m\");\r\n\r\n\t// Today - 1 year\r\n\tvar d1 = Date.parse(\"today - 1 year\");\r\n\r\n\t// Today - 1 year\r\n\tvar d1 = Date.parse(\"t-1y\"); \r\n\r\n\r\n\t/////////////////////////////\r\n\t// Partial Dates and Times //\r\n\t/////////////////////////////\r\n\r\n\t// July 15th of this year.\r\n\tvar d1 = Date.parse(\"July 15\");\r\n\r\n\t// 15th day of current day and year.\r\n\tvar d1 = Date.parse(\"15\");\r\n\r\n\t// July 1st of current year at 10pm.\r\n\tvar d1 = Date.parse(\"7/1 10pm\");\r\n\t</code></pre>\r\n\t *\r\n\t * @param {String}   The string value to convert into a Date object [Required]\r\n\t * @return {Date}    A Date object or null if the string cannot be converted into a Date.\r\n\t */\r\n\tvar parseUtils = {\r\n\t\tremoveOrds: function (s) {\r\n\t\t\tords = s.match(/\\b(\\d+)(?:st|nd|rd|th)\\b/); // find ordinal matches\r\n\t\t\ts = ((ords && ords.length === 2) ? s.replace(ords[0], ords[1]) : s);\r\n\t\t\treturn s;\r\n\t\t},\r\n\t\tgrammarParser: function (s) {\r\n\t\t\tvar r = null;\r\n\t\t\ttry {\r\n\t\t\t\tr = $D.Grammar.start.call({}, s.replace(/^\\s*(\\S*(\\s+\\S+)*)\\s*$/, \"$1\"));\r\n\t\t\t} catch (e) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn ((r[1].length === 0) ? r[0] : null);\r\n\t\t},\r\n\t\tnativeFallback: function(s) {\r\n\t\t\tvar t;\r\n\t\t\ttry {\r\n\t\t\t\t// ok we haven't parsed it, last ditch attempt with the built-in parser.\r\n\t\t\t\tt = Date._parse(s);\r\n\t\t\t\treturn (t || t === 0) ? new Date(t) : null;\r\n\t\t\t} catch (e) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\tfunction parse (s) {\r\n\t\tvar d;\r\n\t\tif (!s) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tif (s instanceof Date) {\r\n\t\t\treturn s.clone();\r\n\t\t}\r\n\t\tif (s.length >= 4 && s.charAt(0) !== \"0\" && s.charAt(0) !== \"+\"&& s.charAt(0) !== \"-\") { // ie: 2004 will pass, 0800 won't.\r\n\t\t\t//  Start with specific formats\r\n\t\t\td = $D.Parsing.ISO.parse(s) || $D.Parsing.Numeric.parse(s);\r\n\t\t}\r\n\t\tif (d instanceof Date && !isNaN(d.getTime())) {\r\n\t\t\treturn d;\r\n\t\t} else {\r\n\t\t\t// find ordinal dates (1st, 3rd, 8th, etc and remove them as they cause parsing issues)\r\n\t\t\ts = $D.Parsing.Normalizer.parse(parseUtils.removeOrds(s));\r\n\t\t\td = parseUtils.grammarParser(s);\r\n\t\t\tif (d !== null) {\r\n\t\t\t\treturn d;\r\n\t\t\t} else {\r\n\t\t\t\treturn parseUtils.nativeFallback(s);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tif (!$D._parse) {\r\n\t\t$D._parse = $D.parse;\r\n\t}\r\n\t$D.parse = parse;\r\n\r\n\tDate.getParseFunction = function (fx) {\r\n\t\tvar fns = Date.Grammar.allformats(fx);\r\n\t\treturn function (s) {\r\n\t\t\tvar r = null;\r\n\t\t\tfor (var i = 0; i < fns.length; i++) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tr = fns[i].call({}, s);\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tif (r[1].length === 0) {\r\n\t\t\t\t\treturn r[0];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t};\r\n\t};\r\n\t\r\n\t/**\r\n\t * Converts the specified string value into its JavaScript Date equivalent using the specified format {String} or formats {Array} and the CultureInfo specific format information.\r\n\t * The format of the string value must match one of the supplied formats exactly.\r\n\t * \r\n\t * Example\r\n\t<pre><code>\r\n\t// 15-Oct-2004\r\n\tvar d1 = Date.parseExact(\"10/15/2004\", \"M/d/yyyy\");\r\n\r\n\t// 15-Oct-2004\r\n\tvar d1 = Date.parse(\"15-Oct-2004\", \"M-ddd-yyyy\");\r\n\r\n\t// 15-Oct-2004\r\n\tvar d1 = Date.parse(\"2004.10.15\", \"yyyy.MM.dd\");\r\n\r\n\t// Multiple formats\r\n\tvar d1 = Date.parseExact(\"10/15/2004\", [\"M/d/yyyy\", \"MMMM d, yyyy\"]);\r\n\t</code></pre>\r\n\t *\r\n\t * @param {String}   The string value to convert into a Date object [Required].\r\n\t * @param {Object}   The expected format {String} or an array of expected formats {Array} of the date string [Required].\r\n\t * @return {Date}    A Date object or null if the string cannot be converted into a Date.\r\n\t */\r\n\t$D.parseExact = function (s, fx) {\r\n\t\treturn $D.getParseFunction(fx)(s);\r\n\t};\r\n}());\r\n"]},"metadata":{},"sourceType":"script"}