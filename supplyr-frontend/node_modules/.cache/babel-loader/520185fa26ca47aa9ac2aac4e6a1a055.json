{"ast":null,"code":"(function () {\n  \"use strict\";\n\n  var attrs = [\"years\", \"months\", \"days\", \"hours\", \"minutes\", \"seconds\", \"milliseconds\"];\n\n  var gFn = function (attr) {\n    return function () {\n      return this[attr];\n    };\n  };\n\n  var sFn = function (attr) {\n    return function (val) {\n      this[attr] = val;\n      return this;\n    };\n  };\n\n  var addSetFuncs = function (context, attrs) {\n    for (var i = 0; i < attrs.length; i++) {\n      var $a = attrs[i],\n          $b = $a.slice(0, 1).toUpperCase() + $a.slice(1);\n      context.prototype[$a] = 0;\n      context.prototype[\"get\" + $b] = gFn($a);\n      context.prototype[\"set\" + $b] = sFn($a);\n    }\n  };\n\n  var setMonthsAndYears = function (orient, d1, d2, context) {\n    function inc() {\n      d1.addMonths(-orient);\n      context.months++;\n\n      if (context.months === 12) {\n        context.years++;\n        context.months = 0;\n      }\n    }\n\n    if (orient === +1) {\n      while (d1 > d2) {\n        inc();\n      }\n    } else {\n      while (d1 < d2) {\n        inc();\n      }\n    }\n\n    context.months--;\n    context.months *= orient;\n    context.years *= orient;\n  };\n\n  var adjustForDST = function (orient, startDate, endDate) {\n    var hasDSTMismatch = false === (startDate.isDaylightSavingTime() === endDate.isDaylightSavingTime());\n\n    if (hasDSTMismatch && orient === 1) {\n      startDate.addHours(-1);\n    } else if (hasDSTMismatch) {\n      startDate.addHours(1);\n    }\n  };\n  /**\n   * TimePeriod(startDate, endDate);\n   * TimePeriod(years, months, days, hours, minutes, seconds, milliseconds);\n   */\n\n\n  var TimePeriod = function (years, months, days, hours, minutes, seconds, milliseconds) {\n    if (arguments.length === 7) {\n      this.set(years, months, days, hours, minutes, seconds, milliseconds);\n    } else if (arguments.length === 2 && arguments[0] instanceof Date && arguments[1] instanceof Date) {\n      var startDate = arguments[0].clone();\n      var endDate = arguments[1].clone();\n      var orient = startDate > endDate ? +1 : -1;\n      this.dates = {\n        start: arguments[0].clone(),\n        end: arguments[1].clone()\n      };\n      setMonthsAndYears(orient, startDate, endDate, this);\n      adjustForDST(orient, startDate, endDate); // // TODO - adjust for DST\n\n      var diff = endDate - startDate;\n\n      if (diff !== 0) {\n        var ts = new TimeSpan(diff);\n        this.set(this.years, this.months, ts.getDays(), ts.getHours(), ts.getMinutes(), ts.getSeconds(), ts.getMilliseconds());\n      }\n    }\n\n    return this;\n  }; // create all the set functions.\n\n\n  addSetFuncs(TimePeriod, attrs);\n\n  TimePeriod.prototype.set = function (years, months, days, hours, minutes, seconds, milliseconds) {\n    this.setYears(years || this.getYears());\n    this.setMonths(months || this.getMonths());\n    this.setDays(days || this.getDays());\n    this.setHours(hours || this.getHours());\n    this.setMinutes(minutes || this.getMinutes());\n    this.setSeconds(seconds || this.getSeconds());\n    this.setMilliseconds(milliseconds || this.getMilliseconds());\n  };\n\n  Date.TimePeriod = TimePeriod;\n\n  if (typeof window !== \"undefined\") {\n    // keeping API compatible for v1.x \n    window.TimePeriod = TimePeriod;\n  }\n})();","map":{"version":3,"sources":["/Users/keeganfinegan/Documents/2021/SoftwareDevelopment/Assignment/supplyr-frontend/node_modules/datejs/src/core/time_period.js"],"names":["attrs","gFn","attr","sFn","val","addSetFuncs","context","i","length","$a","$b","slice","toUpperCase","prototype","setMonthsAndYears","orient","d1","d2","inc","addMonths","months","years","adjustForDST","startDate","endDate","hasDSTMismatch","isDaylightSavingTime","addHours","TimePeriod","days","hours","minutes","seconds","milliseconds","arguments","set","Date","clone","dates","start","end","diff","ts","TimeSpan","getDays","getHours","getMinutes","getSeconds","getMilliseconds","setYears","getYears","setMonths","getMonths","setDays","setHours","setMinutes","setSeconds","setMilliseconds","window"],"mappings":"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","sourcesContent":["(function () {\n\t\"use strict\";\n\tvar attrs = [\"years\", \"months\", \"days\", \"hours\", \"minutes\", \"seconds\", \"milliseconds\"];\n\tvar gFn = function (attr) {\n\t\treturn function () {\n\t\t\treturn this[attr];\n\t\t};\n\t};\n\t\n\tvar sFn = function (attr) {\n\t\treturn function (val) {\n\t\t\tthis[attr] = val;\n\t\t\treturn this;\n\t\t};\n\t};\n\tvar addSetFuncs = function (context, attrs) {\n\t\tfor (var i = 0; i < attrs.length ; i++) {\n\t\t\tvar $a = attrs[i], $b = $a.slice(0, 1).toUpperCase() + $a.slice(1);\n\t\t\tcontext.prototype[$a] = 0;\n\t\t\tcontext.prototype[\"get\" + $b] = gFn($a);\n\t\t\tcontext.prototype[\"set\" + $b] = sFn($a);\n\t\t}\n\t};\n\n\tvar setMonthsAndYears = function (orient, d1, d2, context) {\n\t\tfunction inc() {\n\t\t\td1.addMonths(-orient);\n\t\t\tcontext.months++;\n\t\t\tif (context.months === 12) {\n\t\t\t\tcontext.years++;\n\t\t\t\tcontext.months = 0;\n\t\t\t}\n\t\t}\n\t\tif (orient === +1) {\n\t\t\twhile (d1 > d2) {\n\t\t\t\tinc();\n\t\t\t}\n\t\t} else {\n\t\t\twhile (d1 < d2) {\n\t\t\t\tinc();\n\t\t\t}\n\t\t}\n\t\tcontext.months--;\n\t\tcontext.months *= orient;\n\t\tcontext.years *= orient;\n\t};\n\n\tvar adjustForDST = function(orient, startDate, endDate) {\n\t\tvar hasDSTMismatch = (false === (startDate.isDaylightSavingTime() === endDate.isDaylightSavingTime()));\n\t\tif (hasDSTMismatch && orient === 1) {\n\t\t\tstartDate.addHours(-1);\n\t\t} else if (hasDSTMismatch) {\n\t\t\tstartDate.addHours(1);\n\t\t}\n\t};\n\t/**\n\t * TimePeriod(startDate, endDate);\n\t * TimePeriod(years, months, days, hours, minutes, seconds, milliseconds);\n\t */\n\tvar TimePeriod = function (years, months, days, hours, minutes, seconds, milliseconds) {\n\t\tif (arguments.length === 7) {\n\t\t\tthis.set(years, months, days, hours, minutes, seconds, milliseconds);\n\t\t} else if (arguments.length === 2 && arguments[0] instanceof Date && arguments[1] instanceof Date) {\n\t\t\tvar startDate = arguments[0].clone();\n\t\t\tvar endDate = arguments[1].clone();\n\t\t\tvar orient = (startDate > endDate) ? +1 : -1;\n\t\t\tthis.dates = {\n\t\t\t\tstart: arguments[0].clone(),\n\t\t\t\tend: arguments[1].clone()\n\t\t\t};\n\n\t\t\tsetMonthsAndYears(orient, startDate, endDate, this);\n\t\t\tadjustForDST(orient, startDate, endDate);\n\t\t\t// // TODO - adjust for DST\n\t\t\tvar diff = endDate - startDate;\n\t\t\tif (diff !== 0) {\n\t\t\t\tvar ts = new TimeSpan(diff);\n\t\t\t\tthis.set(this.years, this.months, ts.getDays(), ts.getHours(), ts.getMinutes(), ts.getSeconds(), ts.getMilliseconds());\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t};\n\t// create all the set functions.\n\taddSetFuncs(TimePeriod, attrs);\n\tTimePeriod.prototype.set = function (years, months, days, hours, minutes, seconds, milliseconds){\n\t\tthis.setYears(years || this.getYears());\n\t\tthis.setMonths(months || this.getMonths());\n\t\tthis.setDays(days || this.getDays());\n\t\tthis.setHours(hours || this.getHours());\n\t\tthis.setMinutes(minutes || this.getMinutes());\n\t\tthis.setSeconds(seconds || this.getSeconds());\n\t\tthis.setMilliseconds(milliseconds || this.getMilliseconds());\n\t};\n\n\tDate.TimePeriod = TimePeriod;\n\n\tif (typeof window !== \"undefined\") {\n\t\t// keeping API compatible for v1.x \n\t\twindow.TimePeriod = TimePeriod;\n\t}\n}());"]},"metadata":{},"sourceType":"script"}