{"ast":null,"code":"var _jsxFileName = \"/Users/keeganfinegan/Documents/2021/SoftwareDevelopment/Assignment/supplyr-frontend/src/components/Overview/Chart.js\";\nimport { Line } from 'react-chartjs-2';\nimport React, { useEffect, useState } from 'react';\nimport './Chart.css';\nimport dateFormat from 'dateformat';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Chart = props => {\n  let dataset = props.tradeData.map((obj, index) => {\n    if (obj.type === 'SELL') {\n      return obj.price;\n    }\n  });\n  let labels = props.tradeData.map((obj, index) => {\n    if (obj.type === 'SELL') {\n      return dateFormat(obj.timestamp, 'mm/yyyy');\n    }\n  }); // Format data for use with Chart.js\n\n  let data = {\n    // Reverse labels array to be in the correct order\n    labels: labels,\n    datasets: [{\n      fill: false,\n      tension: 0.1,\n      label: props.asset + ' Sale Price',\n      fillColor: ['rgba(0,10,220,0.5)', 'rgba(220,0,10,0.5)', 'rgba(220,0,0,0.5)', 'rgba(120,250,120,0.5)'],\n      backgroundColor: 'rgba(50, 166, 255, 0.62) ',\n      data: dataset,\n      height: '400px',\n      width: '500px',\n      borderColor: 'rgba(50, 166, 255, 0.62) ',\n      scaleFontColor: 'rgba(50, 166, 255, 0.62) '\n    }]\n  };\n  const options = {\n    xAxisID: 'date',\n    yAxisID: 'credits',\n    borderWidth: 3,\n    spanGaps: true,\n    responsive: true,\n    scales: {\n      y: {\n        show: true,\n        text: 'credits'\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chart-container\",\n    children: /*#__PURE__*/_jsxDEV(Line, {\n      options: options,\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_c = Chart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"sources":["/Users/keeganfinegan/Documents/2021/SoftwareDevelopment/Assignment/supplyr-frontend/src/components/Overview/Chart.js"],"names":["Line","React","useEffect","useState","dateFormat","Chart","props","dataset","tradeData","map","obj","index","type","price","labels","timestamp","data","datasets","fill","tension","label","asset","fillColor","backgroundColor","height","width","borderColor","scaleFontColor","options","xAxisID","yAxisID","borderWidth","spanGaps","responsive","scales","y","show","text"],"mappings":";AAAA,SAASA,IAAT,QAAqB,iBAArB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,aAAP;AACA,OAAOC,UAAP,MAAuB,YAAvB;;AAEA,OAAO,MAAMC,KAAK,GAAIC,KAAD,IAAW;AAC9B,MAAIC,OAAO,GAAGD,KAAK,CAACE,SAAN,CAAgBC,GAAhB,CAAoB,CAACC,GAAD,EAAMC,KAAN,KAAgB;AAChD,QAAID,GAAG,CAACE,IAAJ,KAAa,MAAjB,EAAyB;AACvB,aAAOF,GAAG,CAACG,KAAX;AACD;AACF,GAJa,CAAd;AAMA,MAAIC,MAAM,GAAGR,KAAK,CAACE,SAAN,CAAgBC,GAAhB,CAAoB,CAACC,GAAD,EAAMC,KAAN,KAAgB;AAC/C,QAAID,GAAG,CAACE,IAAJ,KAAa,MAAjB,EAAyB;AACvB,aAAOR,UAAU,CAACM,GAAG,CAACK,SAAL,EAAgB,SAAhB,CAAjB;AACD;AACF,GAJY,CAAb,CAP8B,CAa9B;;AACA,MAAIC,IAAI,GAAG;AACT;AACAF,IAAAA,MAAM,EAAEA,MAFC;AAITG,IAAAA,QAAQ,EAAE,CACR;AACEC,MAAAA,IAAI,EAAE,KADR;AAEEC,MAAAA,OAAO,EAAE,GAFX;AAGEC,MAAAA,KAAK,EAAEd,KAAK,CAACe,KAAN,GAAc,aAHvB;AAIEC,MAAAA,SAAS,EAAE,CACT,oBADS,EAET,oBAFS,EAGT,mBAHS,EAIT,uBAJS,CAJb;AAUEC,MAAAA,eAAe,EAAE,2BAVnB;AAWEP,MAAAA,IAAI,EAAET,OAXR;AAYEiB,MAAAA,MAAM,EAAE,OAZV;AAaEC,MAAAA,KAAK,EAAE,OAbT;AAcEC,MAAAA,WAAW,EAAE,2BAdf;AAeEC,MAAAA,cAAc,EAAE;AAflB,KADQ;AAJD,GAAX;AAwBA,QAAMC,OAAO,GAAG;AACdC,IAAAA,OAAO,EAAE,MADK;AAEdC,IAAAA,OAAO,EAAE,SAFK;AAGdC,IAAAA,WAAW,EAAE,CAHC;AAIdC,IAAAA,QAAQ,EAAE,IAJI;AAKdC,IAAAA,UAAU,EAAE,IALE;AAMdC,IAAAA,MAAM,EAAE;AACNC,MAAAA,CAAC,EAAE;AACDC,QAAAA,IAAI,EAAE,IADL;AAEDC,QAAAA,IAAI,EAAE;AAFL;AADG;AANM,GAAhB;AAcA,sBACE;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA,2BACE,QAAC,IAAD;AAAM,MAAA,OAAO,EAAET,OAAf;AAAwB,MAAA,IAAI,EAAEZ;AAA9B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAzDM;KAAMX,K","sourcesContent":["import { Line } from 'react-chartjs-2';\nimport React, { useEffect, useState } from 'react';\nimport './Chart.css';\nimport dateFormat from 'dateformat';\n\nexport const Chart = (props) => {\n  let dataset = props.tradeData.map((obj, index) => {\n    if (obj.type === 'SELL') {\n      return obj.price;\n    }\n  });\n\n  let labels = props.tradeData.map((obj, index) => {\n    if (obj.type === 'SELL') {\n      return dateFormat(obj.timestamp, 'mm/yyyy');\n    }\n  });\n\n  // Format data for use with Chart.js\n  let data = {\n    // Reverse labels array to be in the correct order\n    labels: labels,\n\n    datasets: [\n      {\n        fill: false,\n        tension: 0.1,\n        label: props.asset + ' Sale Price',\n        fillColor: [\n          'rgba(0,10,220,0.5)',\n          'rgba(220,0,10,0.5)',\n          'rgba(220,0,0,0.5)',\n          'rgba(120,250,120,0.5)',\n        ],\n        backgroundColor: 'rgba(50, 166, 255, 0.62) ',\n        data: dataset,\n        height: '400px',\n        width: '500px',\n        borderColor: 'rgba(50, 166, 255, 0.62) ',\n        scaleFontColor: 'rgba(50, 166, 255, 0.62) ',\n      },\n    ],\n  };\n  const options = {\n    xAxisID: 'date',\n    yAxisID: 'credits',\n    borderWidth: 3,\n    spanGaps: true,\n    responsive: true,\n    scales: {\n      y: {\n        show: true,\n        text: 'credits',\n      },\n    },\n  };\n\n  return (\n    <div className=\"chart-container\">\n      <Line options={options} data={data} />\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}