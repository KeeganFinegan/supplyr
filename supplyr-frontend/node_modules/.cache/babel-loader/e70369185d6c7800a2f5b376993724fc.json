{"ast":null,"code":"(function () {\n  var $D = Date,\n      $P = $D.prototype,\n      // $C = $D.CultureInfo, // not used atm\n  p = function (s, l) {\n    if (!l) {\n      l = 2;\n    }\n\n    return (\"000\" + s).slice(l * -1);\n  };\n  /**\r\n   * Converts a PHP format string to Java/.NET format string.\r\n   * A PHP format string can be used with ._format or .format.\r\n   * A Java/.NET format string can be used with .toString().\r\n   * The .parseExact function will only accept a Java/.NET format string\r\n   *\r\n   * Example\r\n   * var f1 = \"%m/%d/%y\"\r\n   * var f2 = Date.normalizeFormat(f1);\t// \"MM/dd/yy\"\r\n   *\r\n   * new Date().format(f1);\t// \"04/13/08\"\r\n   * new Date()._format(f1);\t// \"04/13/08\"\r\n   * new Date().toString(f2);\t// \"04/13/08\"\r\n   *\r\n   * var date = Date.parseExact(\"04/13/08\", f2); // Sun Apr 13 2008\r\n   *\r\n   * @param {String}   A PHP format string consisting of one or more format spcifiers.\r\n   * @return {String}  The PHP format converted to a Java/.NET format string.\r\n   */\n\n\n  var normalizerSubstitutions = {\n    \"d\": \"dd\",\n    \"%d\": \"dd\",\n    \"D\": \"ddd\",\n    \"%a\": \"ddd\",\n    \"j\": \"dddd\",\n    \"l\": \"dddd\",\n    \"%A\": \"dddd\",\n    \"S\": \"S\",\n    \"F\": \"MMMM\",\n    \"%B\": \"MMMM\",\n    \"m\": \"MM\",\n    \"%m\": \"MM\",\n    \"M\": \"MMM\",\n    \"%b\": \"MMM\",\n    \"%h\": \"MMM\",\n    \"n\": \"M\",\n    \"Y\": \"yyyy\",\n    \"%Y\": \"yyyy\",\n    \"y\": \"yy\",\n    \"%y\": \"yy\",\n    \"g\": \"h\",\n    \"%I\": \"h\",\n    \"G\": \"H\",\n    \"h\": \"hh\",\n    \"H\": \"HH\",\n    \"%H\": \"HH\",\n    \"i\": \"mm\",\n    \"%M\": \"mm\",\n    \"s\": \"ss\",\n    \"%S\": \"ss\",\n    \"%r\": \"hh:mm tt\",\n    \"%R\": \"H:mm\",\n    \"%T\": \"H:mm:ss\",\n    \"%X\": \"t\",\n    \"%x\": \"d\",\n    \"%e\": \"d\",\n    \"%D\": \"MM/dd/yy\",\n    \"%n\": \"\\\\n\",\n    \"%t\": \"\\\\t\",\n    \"e\": \"z\",\n    \"T\": \"z\",\n    \"%z\": \"z\",\n    \"%Z\": \"z\",\n    \"Z\": \"ZZ\",\n    \"N\": \"u\",\n    \"w\": \"u\",\n    \"%w\": \"u\",\n    \"W\": \"W\",\n    \"%V\": \"W\"\n  };\n  var normalizer = {\n    substitutes: function (m) {\n      return normalizerSubstitutions[m];\n    },\n    interpreted: function (m, x) {\n      var y;\n\n      switch (m) {\n        case \"%u\":\n          return x.getDay() + 1;\n\n        case \"z\":\n          return x.getOrdinalNumber();\n\n        case \"%j\":\n          return p(x.getOrdinalNumber(), 3);\n\n        case \"%U\":\n          var d1 = x.clone().set({\n            month: 0,\n            day: 1\n          }).addDays(-1).moveToDayOfWeek(0),\n              d2 = x.clone().addDays(1).moveToDayOfWeek(0, -1);\n          return d2 < d1 ? \"00\" : p((d2.getOrdinalNumber() - d1.getOrdinalNumber()) / 7 + 1);\n\n        case \"%W\":\n          return p(x.getWeek());\n\n        case \"t\":\n          return $D.getDaysInMonth(x.getFullYear(), x.getMonth());\n\n        case \"o\":\n        case \"%G\":\n          return x.setWeek(x.getISOWeek()).toString(\"yyyy\");\n\n        case \"%g\":\n          return x._format(\"%G\").slice(-2);\n\n        case \"a\":\n        case \"%p\":\n          return t(\"tt\").toLowerCase();\n\n        case \"A\":\n          return t(\"tt\").toUpperCase();\n\n        case \"u\":\n          return p(x.getMilliseconds(), 3);\n\n        case \"I\":\n          return x.isDaylightSavingTime() ? 1 : 0;\n\n        case \"O\":\n          return x.getUTCOffset();\n\n        case \"P\":\n          y = x.getUTCOffset();\n          return y.substring(0, y.length - 2) + \":\" + y.substring(y.length - 2);\n\n        case \"B\":\n          var now = new Date();\n          return Math.floor((now.getHours() * 3600 + now.getMinutes() * 60 + now.getSeconds() + (now.getTimezoneOffset() + 60) * 60) / 86.4);\n\n        case \"c\":\n          return x.toISOString().replace(/\\\"/g, \"\");\n\n        case \"U\":\n          return $D.strtotime(\"now\");\n\n        case \"%c\":\n          return t(\"d\") + \" \" + t(\"t\");\n\n        case \"%C\":\n          return Math.floor(x.getFullYear() / 100 + 1);\n      }\n    },\n    shouldOverrideDefaults: function (m) {\n      switch (m) {\n        case \"%e\":\n          return true;\n\n        default:\n          return false;\n      }\n    },\n    parse: function (m, context) {\n      var formatString,\n          c = context || new Date();\n      formatString = normalizer.substitutes(m);\n\n      if (formatString) {\n        return formatString;\n      }\n\n      formatString = normalizer.interpreted(m, c);\n\n      if (formatString) {\n        return formatString;\n      } else {\n        return m;\n      }\n    }\n  };\n\n  $D.normalizeFormat = function (format, context) {\n    return format.replace(/(%|\\\\)?.|%%/g, function (t) {\n      return normalizer.parse(t, context);\n    });\n  };\n  /**\r\n   * Format a local Unix timestamp according to locale settings\r\n   *\r\n   * Example:\r\n   * Date.strftime(\"%m/%d/%y\", new Date());\t\t// \"04/13/08\"\r\n   * Date.strftime(\"c\", \"2008-04-13T17:52:03Z\");\t// \"04/13/08\"\r\n   *\r\n   * @param {String}   A format string consisting of one or more format spcifiers [Optional].\r\n   * @param {Number|String}   The number representing the number of seconds that have elapsed since January 1, 1970 (local time).\r\n   * @return {String}  A string representation of the current Date object.\r\n   */\n\n\n  $D.strftime = function (format, time) {\n    var d = Date.parse(time);\n    return d._format(format);\n  };\n  /**\r\n   * Parse any textual datetime description into a Unix timestamp.\r\n   * A Unix timestamp is the number of seconds that have elapsed since January 1, 1970 (midnight UTC/GMT).\r\n   *\r\n   * Example:\r\n   * Date.strtotime(\"04/13/08\");\t\t\t\t// 1208044800\r\n   * Date.strtotime(\"1970-01-01T00:00:00Z\");\t// 0\r\n   *\r\n   * @param {String}   A format string consisting of one or more format spcifiers [Optional].\r\n   * @param {Object}   A string or date object.\r\n   * @return {String}  A string representation of the current Date object.\r\n   */\n\n\n  $D.strtotime = function (time) {\n    var d = $D.parse(time);\n    return Math.round($D.UTC(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate(), d.getUTCHours(), d.getUTCMinutes(), d.getUTCSeconds(), d.getUTCMilliseconds()) / 1000);\n  };\n  /**\r\n   * Converts the value of the current Date object to its equivalent string representation using a PHP/Unix style of date format specifiers.\r\n   * Format Specifiers\r\n   * Format  Description\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tExample\r\n   * ------  ---------------------------------------------------------------------------\t-----------------------\r\n   * %a\t\tabbreviated weekday name according to the current localed\t\t\t\t\t\"Mon\" through \"Sun\"\r\n   * %A\t\tfull weekday name according to the current localed\t\t\t\t\t\t\t\"Sunday\" through \"Saturday\"\r\n   * %b\t\tabbreviated month name according to the current localed\t\t\t\t\t\t\"Jan\" through \"Dec\"\r\n   * %B\t\tfull month name according to the current locale\t\t\t\t\t\t\t\t\"January\" through \"December\"\r\n   * %c\t\tpreferred date and time representation for the current locale\t\t\t\t\"4/13/2008 12:33 PM\"\r\n   * %C\t\tcentury number (the year divided by 100 and truncated to an integer)\t\t\"00\" to \"99\"\r\n   * %d\t\tday of the month as a decimal number\t\t\t\t\t\t\t\t\t\t\"01\" to \"31\"\r\n   * %D\t\tsame as %m/%d/%y\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"04/13/08\"\r\n   * %e\t\tday of the month as a decimal number, a single digit is preceded by a space\t\"1\" to \"31\"\r\n   * %g\t\tlike %G, but without the century\t\t\t\t\t\t\t\t\t\t\t\"08\"\r\n   * %G\t\tThe 4-digit year corresponding to the ISO week number (see %V).\t\t\t\t\"2008\"\r\n   *\t\tThis has the same format and value as %Y, except that if the ISO week number\r\n   *\t\tbelongs to the previous or next year, that year is used instead.\r\n   * %h\t\tsame as %b\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Jan\" through \"Dec\"\r\n   * %H\t\thour as a decimal number using a 24-hour clock.\t\t\t\t\t\t\t\t\"00\" to \"23\"\r\n   * %I\t\thour as a decimal number using a 12-hour clock.\t\t\t\t\t\t\t\t\"01\" to \"12\"\r\n   * %j\t\tday of the year as a decimal number.\t\t\t\t\t\t\t\t\t\t\"001\" to \"366\"\r\n   * %m\t\tmonth as a decimal number.\t\t\t\t\t\t\t\t\t\t\t\t\t\"01\" to \"12\"\r\n   * %M\t\tminute as a decimal number.\t\t\t\t\t\t\t\t\t\t\t\t\t\"00\" to \"59\"\r\n   * %n\t\tnewline character\t\t\"\\n\"\r\n   * %p\t\teither \"am\" or \"pm\" according to the given time value, or the\t\t\t\t\"am\" or \"pm\"\r\n   *\t\tcorresponding strings for the current locale.\r\n   * %r\t\ttime in a.m. and p.m. notation\t\t\t\t\t\t\t\t\t\t\t\t\"8:44 PM\"\r\n   * %R\t\ttime in 24 hour notation\t\t\t\t\t\t\t\t\t\t\t\t\t\"20:44\"\r\n   * %S\t\tsecond as a decimal number\t\t\t\t\t\t\t\t\t\t\t\t\t\"00\" to \"59\"\r\n   * %t\t\ttab character\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"\\t\"\r\n   * %T\t\tcurrent time, equal to %H:%M:%S\t\t\t\t\t\t\t\t\t\t\t\t\"12:49:11\"\r\n   * %u\t\tweekday as a decimal number [\"1\", \"7\"], with \"1\" representing Monday\t\t\"1\" to \"7\"\r\n   * %U\t\tweek number of the current year as a decimal number, starting with the\t\t\"0\" to (\"52\" or \"53\")\r\n   *\t\tfirst Sunday as the first day of the first week\r\n   * %V\t\tThe ISO 8601:1988 week number of the current year as a decimal number,\t\t\"00\" to (\"52\" or \"53\")\r\n   *\t\trange 01 to 53, where week 1 is the first week that has at least 4 days\r\n   *\t\tin the current year, and with Monday as the first day of the week.\r\n   *\t\t(Use %G or %g for the year component that corresponds to the week number\r\n   *\t\tfor the specified timestamp.)\r\n   * %W\t\tweek number of the current year as a decimal number, starting with the\t\t\"00\" to (\"52\" or \"53\")\r\n   *\t\tfirst Monday as the first day of the first week\r\n   * %w\t\tday of the week as a decimal, Sunday being \"0\"\t\t\t\t\t\t\t\t\"0\" to \"6\"\r\n   * %x\t\tpreferred date representation for the current locale without the time\t\t\"4/13/2008\"\r\n   * %X\t\tpreferred time representation for the current locale without the date\t\t\"12:53:05\"\r\n   * %y\t\tyear as a decimal number without a century\t\t\t\t\t\t\t\t\t\"00\" \"99\"\r\n   * %Y\t\tyear as a decimal number including the century\t\t\t\t\t\t\t\t\"2008\"\r\n   * %Z\t\ttime zone or name or abbreviation\t\t\t\t\t\t\t\t\t\t\t\"UTC\", \"EST\", \"PST\"\r\n   * %z\t\tsame as %Z\r\n   * %%\t\ta literal \"%\" characters\t\t\t\t\t\t\t\t\t\t\t\t\t\"%\"\r\n   * d\t\tDay of the month, 2 digits with leading zeros\t\t\t\t\t\t\t\t\"01\" to \"31\"\r\n   * D\t\tA textual representation of a day, three letters\t\t\t\t\t\t\t\"Mon\" through \"Sun\"\r\n   * j\t\tDay of the month without leading zeros\t\t\t\t\t\t\t\t\t\t\"1\" to \"31\"\r\n   * l\t\tA full textual representation of the day of the week (lowercase \"L\")\t\t\"Sunday\" through \"Saturday\"\r\n   * N\t\tISO-8601 numeric representation of the day of the week (added in PHP 5.1.0)\t\"1\" (for Monday) through \"7\" (for Sunday)\r\n   * S\t\tEnglish ordinal suffix for the day of the month, 2 characters\t\t\t\t\"st\", \"nd\", \"rd\" or \"th\". Works well with j\r\n   * w\t\tNumeric representation of the day of the week\t\t\t\t\t\t\t\t\"0\" (for Sunday) through \"6\" (for Saturday)\r\n   * z\t\tThe day of the year (starting from \"0\")\t\t\t\t\t\t\t\t\t\t\"0\" through \"365\"\r\n   * W\t\tISO-8601 week number of year, weeks starting on Monday\t\t\t\t\t\t\"00\" to (\"52\" or \"53\")\r\n   * F\t\tA full textual representation of a month, such as January or March\t\t\t\"January\" through \"December\"\r\n   * m\t\tNumeric representation of a month, with leading zeros\t\t\t\t\t\t\"01\" through \"12\"\r\n   * M\t\tA short textual representation of a month, three letters\t\t\t\t\t\"Jan\" through \"Dec\"\r\n   * n\t\tNumeric representation of a month, without leading zeros\t\t\t\t\t\"1\" through \"12\"\r\n   * t\t\tNumber of days in the given month\t\t\t\t\t\t\t\t\t\t\t\"28\" through \"31\"\r\n   * L\t\tWhether it's a leap year\t\t\t\t\t\t\t\t\t\t\t\t\t\"1\" if it is a leap year, \"0\" otherwise\r\n   * o\t\tISO-8601 year number. This has the same value as Y, except that if the\t\t\"2008\"\r\n   *\t\tISO week number (W) belongs to the previous or next year, that year\r\n   *\t\tis used instead.\r\n   * Y\t\tA full numeric representation of a year, 4 digits\t\t\t\t\t\t\t\"2008\"\r\n   * y\t\tA two digit representation of a year\t\t\t\t\t\t\t\t\t\t\"08\"\r\n   * a\t\tLowercase Ante meridiem and Post meridiem\t\t\t\t\t\t\t\t\t\"am\" or \"pm\"\r\n   * A\t\tUppercase Ante meridiem and Post meridiem\t\t\t\t\t\t\t\t\t\"AM\" or \"PM\"\r\n   * B\t\tSwatch Internet time\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"000\" through \"999\"\r\n   * g\t\t12-hour format of an hour without leading zeros\t\t\t\t\t\t\t\t\"1\" through \"12\"\r\n   * G\t\t24-hour format of an hour without leading zeros\t\t\t\t\t\t\t\t\"0\" through \"23\"\r\n   * h\t\t12-hour format of an hour with leading zeros\t\t\t\t\t\t\t\t\"01\" through \"12\"\r\n   * H\t\t24-hour format of an hour with leading zeros\t\t\t\t\t\t\t\t\"00\" through \"23\"\r\n   * i\t\tMinutes with leading zeros\t\t\t\t\t\t\t\t\t\t\t\t\t\"00\" to \"59\"\r\n   * s\t\tSeconds, with leading zeros\t\t\t\t\t\t\t\t\t\t\t\t\t\"00\" through \"59\"\r\n   * u\t\tMilliseconds\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"54321\"\r\n   * e\t\tTimezone identifier\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"UTC\", \"EST\", \"PST\"\r\n   * I\t\tWhether or not the date is in daylight saving time (uppercase i)\t\t\t\"1\" if Daylight Saving Time, \"0\" otherwise\r\n   * O\t\tDifference to Greenwich time (GMT) in hours\t\t\t\t\t\t\t\t\t\"+0200\", \"-0600\"\r\n   * P\t\tDifference to Greenwich time (GMT) with colon between hours and minutes\t\t\"+02:00\", \"-06:00\"\r\n   * T\t\tTimezone abbreviation\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"UTC\", \"EST\", \"PST\"\r\n   * Z\t\tTimezone offset in seconds. The offset for timezones west of UTC is\t\t\t\"-43200\" through \"50400\"\r\n   *\t\t\talways negative, and for those east of UTC is always positive.\r\n   * c\t\tISO 8601 date\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"2004-02-12T15:19:21+00:00\"\r\n   * r\t\tRFC 2822 formatted date\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Thu, 21 Dec 2000 16:01:07 +0200\"\r\n   * U\t\tSeconds since the Unix Epoch (January 1 1970 00:00:00 GMT)\t\t\t\t\t\"0\"\r\n   * @param {String}   A format string consisting of one or more format spcifiers [Optional].\r\n   * @return {String}  A string representation of the current Date object.\r\n   */\n\n\n  var formatReplace = function (context) {\n    return function (m) {\n      var formatString,\n          override = false;\n\n      if (m.charAt(0) === \"\\\\\" || m.substring(0, 2) === \"%%\") {\n        return m.replace(\"\\\\\", \"\").replace(\"%%\", \"%\");\n      }\n\n      override = normalizer.shouldOverrideDefaults(m);\n      formatString = $D.normalizeFormat(m, context);\n\n      if (formatString) {\n        return context.toString(formatString, override);\n      }\n    };\n  };\n\n  $P._format = function (format) {\n    var formatter = formatReplace(this);\n\n    if (!format) {\n      return this._toString();\n    } else {\n      return format.replace(/(%|\\\\)?.|%%/g, formatter);\n    }\n  };\n\n  if (!$P.format) {\n    $P.format = $P._format;\n  }\n})();","map":{"version":3,"sources":["/Users/keeganfinegan/Documents/2021/SoftwareDevelopment/Assignment/supplyr-frontend/node_modules/datejs/src/core/extras.js"],"names":["$D","Date","$P","prototype","p","s","l","slice","normalizerSubstitutions","normalizer","substitutes","m","interpreted","x","y","getDay","getOrdinalNumber","d1","clone","set","month","day","addDays","moveToDayOfWeek","d2","getWeek","getDaysInMonth","getFullYear","getMonth","setWeek","getISOWeek","toString","_format","t","toLowerCase","toUpperCase","getMilliseconds","isDaylightSavingTime","getUTCOffset","substring","length","now","Math","floor","getHours","getMinutes","getSeconds","getTimezoneOffset","toISOString","replace","strtotime","shouldOverrideDefaults","parse","context","formatString","c","normalizeFormat","format","strftime","time","d","round","UTC","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","formatReplace","override","charAt","formatter","_toString"],"mappings":"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","sourcesContent":["(function () {\r\n\tvar $D = Date,\r\n\t\t$P = $D.prototype,\r\n\t\t// $C = $D.CultureInfo, // not used atm\r\n\t\tp = function (s, l) {\r\n\t\t\tif (!l) {\r\n\t\t\t\tl = 2;\r\n\t\t\t}\r\n\t\t\treturn (\"000\" + s).slice(l * -1);\r\n\t\t};\r\n\t/**\r\n\t * Converts a PHP format string to Java/.NET format string.\r\n\t * A PHP format string can be used with ._format or .format.\r\n\t * A Java/.NET format string can be used with .toString().\r\n\t * The .parseExact function will only accept a Java/.NET format string\r\n\t *\r\n\t * Example\r\n\t * var f1 = \"%m/%d/%y\"\r\n\t * var f2 = Date.normalizeFormat(f1);\t// \"MM/dd/yy\"\r\n\t *\r\n\t * new Date().format(f1);\t// \"04/13/08\"\r\n\t * new Date()._format(f1);\t// \"04/13/08\"\r\n\t * new Date().toString(f2);\t// \"04/13/08\"\r\n\t *\r\n\t * var date = Date.parseExact(\"04/13/08\", f2); // Sun Apr 13 2008\r\n\t *\r\n\t * @param {String}   A PHP format string consisting of one or more format spcifiers.\r\n\t * @return {String}  The PHP format converted to a Java/.NET format string.\r\n\t */\r\n\t var normalizerSubstitutions = {\r\n\t\t\"d\" : \"dd\",\r\n\t\t\"%d\": \"dd\",\r\n\t\t\"D\" : \"ddd\",\r\n\t\t\"%a\": \"ddd\",\r\n\t\t\"j\" : \"dddd\",\r\n\t\t\"l\" : \"dddd\",\r\n\t\t\"%A\": \"dddd\",\r\n\t\t\"S\" : \"S\",\r\n\t\t\"F\" : \"MMMM\",\r\n\t\t\"%B\": \"MMMM\",\r\n\t\t\"m\" : \"MM\",\r\n\t\t\"%m\": \"MM\",\r\n\t\t\"M\" : \"MMM\",\r\n\t\t\"%b\": \"MMM\",\r\n\t\t\"%h\": \"MMM\",\r\n\t\t\"n\" : \"M\",\r\n\t\t\"Y\" : \"yyyy\",\r\n\t\t\"%Y\": \"yyyy\",\r\n\t\t\"y\" : \"yy\",\r\n\t\t\"%y\": \"yy\",\r\n\t\t\"g\" : \"h\",\r\n\t\t\"%I\": \"h\",\r\n\t\t\"G\" : \"H\",\r\n\t\t\"h\" : \"hh\",\r\n\t\t\"H\" : \"HH\",\r\n\t\t\"%H\": \"HH\",\r\n\t\t\"i\" : \"mm\",\r\n\t\t\"%M\": \"mm\",\r\n\t\t\"s\" : \"ss\",\r\n\t\t\"%S\": \"ss\",\r\n\t\t\"%r\": \"hh:mm tt\",\r\n\t\t\"%R\": \"H:mm\",\r\n\t\t\"%T\": \"H:mm:ss\",\r\n\t\t\"%X\": \"t\",\r\n\t\t\"%x\": \"d\",\r\n\t\t\"%e\": \"d\",\r\n\t\t\"%D\": \"MM/dd/yy\",\r\n\t\t\"%n\": \"\\\\n\",\r\n\t\t\"%t\": \"\\\\t\",\r\n\t\t\"e\" : \"z\",\r\n\t\t\"T\" : \"z\",\r\n\t\t\"%z\": \"z\",\r\n\t\t\"%Z\": \"z\",\r\n\t\t\"Z\" : \"ZZ\",\r\n\t\t\"N\" : \"u\",\r\n\t\t\"w\" : \"u\",\r\n\t\t\"%w\": \"u\",\r\n\t\t\"W\" : \"W\",\r\n\t\t\"%V\": \"W\"\r\n\t};\r\n\tvar normalizer = {\r\n\t\tsubstitutes: function (m) {\r\n\t\t\treturn normalizerSubstitutions[m];\r\n\t\t},\r\n\t\tinterpreted: function (m, x) {\r\n\t\t\tvar y;\r\n\t\t\tswitch (m) {\r\n\t\t\t\tcase \"%u\":\r\n\t\t\t\t\treturn x.getDay() + 1;\r\n\t\t\t\tcase \"z\":\r\n\t\t\t\t\treturn x.getOrdinalNumber();\r\n\t\t\t\tcase \"%j\":\r\n\t\t\t\t\treturn p(x.getOrdinalNumber(), 3);\r\n\t\t\t\tcase \"%U\":\r\n\t\t\t\t\tvar d1 = x.clone().set({month: 0, day: 1}).addDays(-1).moveToDayOfWeek(0),\r\n\t\t\t\t\t\td2 = x.clone().addDays(1).moveToDayOfWeek(0, -1);\r\n\t\t\t\t\treturn (d2 < d1) ? \"00\" : p((d2.getOrdinalNumber() - d1.getOrdinalNumber()) / 7 + 1);\r\n\r\n\t\t\t\tcase \"%W\":\r\n\t\t\t\t\treturn p(x.getWeek());\r\n\t\t\t\tcase \"t\":\r\n\t\t\t\t\treturn $D.getDaysInMonth(x.getFullYear(), x.getMonth());\r\n\t\t\t\tcase \"o\":\r\n\t\t\t\tcase \"%G\":\r\n\t\t\t\t\treturn x.setWeek(x.getISOWeek()).toString(\"yyyy\");\r\n\t\t\t\tcase \"%g\":\r\n\t\t\t\t\treturn x._format(\"%G\").slice(-2);\r\n\t\t\t\tcase \"a\":\r\n\t\t\t\tcase \"%p\":\r\n\t\t\t\t\treturn t(\"tt\").toLowerCase();\r\n\t\t\t\tcase \"A\":\r\n\t\t\t\t\treturn t(\"tt\").toUpperCase();\r\n\t\t\t\tcase \"u\":\r\n\t\t\t\t\treturn p(x.getMilliseconds(), 3);\r\n\t\t\t\tcase \"I\":\r\n\t\t\t\t\treturn (x.isDaylightSavingTime()) ? 1 : 0;\r\n\t\t\t\tcase \"O\":\r\n\t\t\t\t\treturn x.getUTCOffset();\r\n\t\t\t\tcase \"P\":\r\n\t\t\t\t\ty = x.getUTCOffset();\r\n\t\t\t\t\treturn y.substring(0, y.length - 2) + \":\" + y.substring(y.length - 2);\r\n\t\t\t\tcase \"B\":\r\n\t\t\t\t\tvar now = new Date();\r\n\t\t\t\t\treturn Math.floor(((now.getHours() * 3600) + (now.getMinutes() * 60) + now.getSeconds() + (now.getTimezoneOffset() + 60) * 60) / 86.4);\r\n\t\t\t\tcase \"c\":\r\n\t\t\t\t\treturn x.toISOString().replace(/\\\"/g, \"\");\r\n\t\t\t\tcase \"U\":\r\n\t\t\t\t\treturn $D.strtotime(\"now\");\r\n\t\t\t\tcase \"%c\":\r\n\t\t\t\t\treturn t(\"d\") + \" \" + t(\"t\");\r\n\t\t\t\tcase \"%C\":\r\n\t\t\t\t\treturn Math.floor(x.getFullYear() / 100 + 1);\r\n\t\t\t}\r\n\t\t},\r\n\t\tshouldOverrideDefaults: function (m) {\r\n\t\t\tswitch (m) {\r\n\t\t\t\tcase \"%e\":\r\n\t\t\t\t\treturn true;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t},\r\n\t\tparse: function (m, context) {\r\n\t\t\tvar formatString, c = context || new Date();\r\n\t\t\tformatString = normalizer.substitutes(m);\r\n\t\t\tif (formatString) {\r\n\t\t\t\treturn formatString;\r\n\t\t\t}\r\n\t\t\tformatString = normalizer.interpreted(m, c);\r\n\r\n\t\t\tif (formatString) {\r\n\t\t\t\treturn formatString;\r\n\t\t\t} else {\r\n\t\t\t\treturn m;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t$D.normalizeFormat = function (format, context) {\r\n\t\treturn format.replace(/(%|\\\\)?.|%%/g, function(t){\r\n\t\t\t\treturn normalizer.parse(t, context);\r\n\t\t});\r\n\t};\r\n\t/**\r\n\t * Format a local Unix timestamp according to locale settings\r\n\t *\r\n\t * Example:\r\n\t * Date.strftime(\"%m/%d/%y\", new Date());\t\t// \"04/13/08\"\r\n\t * Date.strftime(\"c\", \"2008-04-13T17:52:03Z\");\t// \"04/13/08\"\r\n\t *\r\n\t * @param {String}   A format string consisting of one or more format spcifiers [Optional].\r\n\t * @param {Number|String}   The number representing the number of seconds that have elapsed since January 1, 1970 (local time).\r\n\t * @return {String}  A string representation of the current Date object.\r\n\t */\r\n\t$D.strftime = function (format, time) {\r\n\t\tvar d = Date.parse(time);\r\n\t\treturn d._format(format);\r\n\t};\r\n\t/**\r\n\t * Parse any textual datetime description into a Unix timestamp.\r\n\t * A Unix timestamp is the number of seconds that have elapsed since January 1, 1970 (midnight UTC/GMT).\r\n\t *\r\n\t * Example:\r\n\t * Date.strtotime(\"04/13/08\");\t\t\t\t// 1208044800\r\n\t * Date.strtotime(\"1970-01-01T00:00:00Z\");\t// 0\r\n\t *\r\n\t * @param {String}   A format string consisting of one or more format spcifiers [Optional].\r\n\t * @param {Object}   A string or date object.\r\n\t * @return {String}  A string representation of the current Date object.\r\n\t */\r\n\t$D.strtotime = function (time) {\r\n\t\tvar d = $D.parse(time);\r\n\t\treturn Math.round($D.UTC(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate(), d.getUTCHours(), d.getUTCMinutes(), d.getUTCSeconds(), d.getUTCMilliseconds()) / 1000);\r\n\t};\r\n\t/**\r\n\t * Converts the value of the current Date object to its equivalent string representation using a PHP/Unix style of date format specifiers.\r\n\t * Format Specifiers\r\n\t * Format  Description\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tExample\r\n\t * ------  ---------------------------------------------------------------------------\t-----------------------\r\n\t * %a\t\tabbreviated weekday name according to the current localed\t\t\t\t\t\"Mon\" through \"Sun\"\r\n\t * %A\t\tfull weekday name according to the current localed\t\t\t\t\t\t\t\"Sunday\" through \"Saturday\"\r\n\t * %b\t\tabbreviated month name according to the current localed\t\t\t\t\t\t\"Jan\" through \"Dec\"\r\n\t * %B\t\tfull month name according to the current locale\t\t\t\t\t\t\t\t\"January\" through \"December\"\r\n\t * %c\t\tpreferred date and time representation for the current locale\t\t\t\t\"4/13/2008 12:33 PM\"\r\n\t * %C\t\tcentury number (the year divided by 100 and truncated to an integer)\t\t\"00\" to \"99\"\r\n\t * %d\t\tday of the month as a decimal number\t\t\t\t\t\t\t\t\t\t\"01\" to \"31\"\r\n\t * %D\t\tsame as %m/%d/%y\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"04/13/08\"\r\n\t * %e\t\tday of the month as a decimal number, a single digit is preceded by a space\t\"1\" to \"31\"\r\n\t * %g\t\tlike %G, but without the century\t\t\t\t\t\t\t\t\t\t\t\"08\"\r\n\t * %G\t\tThe 4-digit year corresponding to the ISO week number (see %V).\t\t\t\t\"2008\"\r\n\t *\t\tThis has the same format and value as %Y, except that if the ISO week number\r\n\t *\t\tbelongs to the previous or next year, that year is used instead.\r\n\t * %h\t\tsame as %b\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Jan\" through \"Dec\"\r\n\t * %H\t\thour as a decimal number using a 24-hour clock.\t\t\t\t\t\t\t\t\"00\" to \"23\"\r\n\t * %I\t\thour as a decimal number using a 12-hour clock.\t\t\t\t\t\t\t\t\"01\" to \"12\"\r\n\t * %j\t\tday of the year as a decimal number.\t\t\t\t\t\t\t\t\t\t\"001\" to \"366\"\r\n\t * %m\t\tmonth as a decimal number.\t\t\t\t\t\t\t\t\t\t\t\t\t\"01\" to \"12\"\r\n\t * %M\t\tminute as a decimal number.\t\t\t\t\t\t\t\t\t\t\t\t\t\"00\" to \"59\"\r\n\t * %n\t\tnewline character\t\t\"\\n\"\r\n\t * %p\t\teither \"am\" or \"pm\" according to the given time value, or the\t\t\t\t\"am\" or \"pm\"\r\n\t *\t\tcorresponding strings for the current locale.\r\n\t * %r\t\ttime in a.m. and p.m. notation\t\t\t\t\t\t\t\t\t\t\t\t\"8:44 PM\"\r\n\t * %R\t\ttime in 24 hour notation\t\t\t\t\t\t\t\t\t\t\t\t\t\"20:44\"\r\n\t * %S\t\tsecond as a decimal number\t\t\t\t\t\t\t\t\t\t\t\t\t\"00\" to \"59\"\r\n\t * %t\t\ttab character\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"\\t\"\r\n\t * %T\t\tcurrent time, equal to %H:%M:%S\t\t\t\t\t\t\t\t\t\t\t\t\"12:49:11\"\r\n\t * %u\t\tweekday as a decimal number [\"1\", \"7\"], with \"1\" representing Monday\t\t\"1\" to \"7\"\r\n\t * %U\t\tweek number of the current year as a decimal number, starting with the\t\t\"0\" to (\"52\" or \"53\")\r\n\t *\t\tfirst Sunday as the first day of the first week\r\n\t * %V\t\tThe ISO 8601:1988 week number of the current year as a decimal number,\t\t\"00\" to (\"52\" or \"53\")\r\n\t *\t\trange 01 to 53, where week 1 is the first week that has at least 4 days\r\n\t *\t\tin the current year, and with Monday as the first day of the week.\r\n\t *\t\t(Use %G or %g for the year component that corresponds to the week number\r\n\t *\t\tfor the specified timestamp.)\r\n\t * %W\t\tweek number of the current year as a decimal number, starting with the\t\t\"00\" to (\"52\" or \"53\")\r\n\t *\t\tfirst Monday as the first day of the first week\r\n\t * %w\t\tday of the week as a decimal, Sunday being \"0\"\t\t\t\t\t\t\t\t\"0\" to \"6\"\r\n\t * %x\t\tpreferred date representation for the current locale without the time\t\t\"4/13/2008\"\r\n\t * %X\t\tpreferred time representation for the current locale without the date\t\t\"12:53:05\"\r\n\t * %y\t\tyear as a decimal number without a century\t\t\t\t\t\t\t\t\t\"00\" \"99\"\r\n\t * %Y\t\tyear as a decimal number including the century\t\t\t\t\t\t\t\t\"2008\"\r\n\t * %Z\t\ttime zone or name or abbreviation\t\t\t\t\t\t\t\t\t\t\t\"UTC\", \"EST\", \"PST\"\r\n\t * %z\t\tsame as %Z\r\n\t * %%\t\ta literal \"%\" characters\t\t\t\t\t\t\t\t\t\t\t\t\t\"%\"\r\n\t * d\t\tDay of the month, 2 digits with leading zeros\t\t\t\t\t\t\t\t\"01\" to \"31\"\r\n\t * D\t\tA textual representation of a day, three letters\t\t\t\t\t\t\t\"Mon\" through \"Sun\"\r\n\t * j\t\tDay of the month without leading zeros\t\t\t\t\t\t\t\t\t\t\"1\" to \"31\"\r\n\t * l\t\tA full textual representation of the day of the week (lowercase \"L\")\t\t\"Sunday\" through \"Saturday\"\r\n\t * N\t\tISO-8601 numeric representation of the day of the week (added in PHP 5.1.0)\t\"1\" (for Monday) through \"7\" (for Sunday)\r\n\t * S\t\tEnglish ordinal suffix for the day of the month, 2 characters\t\t\t\t\"st\", \"nd\", \"rd\" or \"th\". Works well with j\r\n\t * w\t\tNumeric representation of the day of the week\t\t\t\t\t\t\t\t\"0\" (for Sunday) through \"6\" (for Saturday)\r\n\t * z\t\tThe day of the year (starting from \"0\")\t\t\t\t\t\t\t\t\t\t\"0\" through \"365\"\r\n\t * W\t\tISO-8601 week number of year, weeks starting on Monday\t\t\t\t\t\t\"00\" to (\"52\" or \"53\")\r\n\t * F\t\tA full textual representation of a month, such as January or March\t\t\t\"January\" through \"December\"\r\n\t * m\t\tNumeric representation of a month, with leading zeros\t\t\t\t\t\t\"01\" through \"12\"\r\n\t * M\t\tA short textual representation of a month, three letters\t\t\t\t\t\"Jan\" through \"Dec\"\r\n\t * n\t\tNumeric representation of a month, without leading zeros\t\t\t\t\t\"1\" through \"12\"\r\n\t * t\t\tNumber of days in the given month\t\t\t\t\t\t\t\t\t\t\t\"28\" through \"31\"\r\n\t * L\t\tWhether it's a leap year\t\t\t\t\t\t\t\t\t\t\t\t\t\"1\" if it is a leap year, \"0\" otherwise\r\n\t * o\t\tISO-8601 year number. This has the same value as Y, except that if the\t\t\"2008\"\r\n\t *\t\tISO week number (W) belongs to the previous or next year, that year\r\n\t *\t\tis used instead.\r\n\t * Y\t\tA full numeric representation of a year, 4 digits\t\t\t\t\t\t\t\"2008\"\r\n\t * y\t\tA two digit representation of a year\t\t\t\t\t\t\t\t\t\t\"08\"\r\n\t * a\t\tLowercase Ante meridiem and Post meridiem\t\t\t\t\t\t\t\t\t\"am\" or \"pm\"\r\n\t * A\t\tUppercase Ante meridiem and Post meridiem\t\t\t\t\t\t\t\t\t\"AM\" or \"PM\"\r\n\t * B\t\tSwatch Internet time\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"000\" through \"999\"\r\n\t * g\t\t12-hour format of an hour without leading zeros\t\t\t\t\t\t\t\t\"1\" through \"12\"\r\n\t * G\t\t24-hour format of an hour without leading zeros\t\t\t\t\t\t\t\t\"0\" through \"23\"\r\n\t * h\t\t12-hour format of an hour with leading zeros\t\t\t\t\t\t\t\t\"01\" through \"12\"\r\n\t * H\t\t24-hour format of an hour with leading zeros\t\t\t\t\t\t\t\t\"00\" through \"23\"\r\n\t * i\t\tMinutes with leading zeros\t\t\t\t\t\t\t\t\t\t\t\t\t\"00\" to \"59\"\r\n\t * s\t\tSeconds, with leading zeros\t\t\t\t\t\t\t\t\t\t\t\t\t\"00\" through \"59\"\r\n\t * u\t\tMilliseconds\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"54321\"\r\n\t * e\t\tTimezone identifier\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"UTC\", \"EST\", \"PST\"\r\n\t * I\t\tWhether or not the date is in daylight saving time (uppercase i)\t\t\t\"1\" if Daylight Saving Time, \"0\" otherwise\r\n\t * O\t\tDifference to Greenwich time (GMT) in hours\t\t\t\t\t\t\t\t\t\"+0200\", \"-0600\"\r\n\t * P\t\tDifference to Greenwich time (GMT) with colon between hours and minutes\t\t\"+02:00\", \"-06:00\"\r\n\t * T\t\tTimezone abbreviation\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"UTC\", \"EST\", \"PST\"\r\n\t * Z\t\tTimezone offset in seconds. The offset for timezones west of UTC is\t\t\t\"-43200\" through \"50400\"\r\n\t *\t\t\talways negative, and for those east of UTC is always positive.\r\n\t * c\t\tISO 8601 date\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"2004-02-12T15:19:21+00:00\"\r\n\t * r\t\tRFC 2822 formatted date\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Thu, 21 Dec 2000 16:01:07 +0200\"\r\n\t * U\t\tSeconds since the Unix Epoch (January 1 1970 00:00:00 GMT)\t\t\t\t\t\"0\"\r\n\t * @param {String}   A format string consisting of one or more format spcifiers [Optional].\r\n\t * @return {String}  A string representation of the current Date object.\r\n\t */\r\n\tvar formatReplace = function (context) {\r\n\t\treturn function (m) {\r\n\t\t\tvar formatString, override = false;\r\n\t\t\tif (m.charAt(0) === \"\\\\\" || m.substring(0, 2) === \"%%\") {\r\n\t\t\t\treturn m.replace(\"\\\\\", \"\").replace(\"%%\", \"%\");\r\n\t\t\t}\r\n\r\n\t\t\toverride = normalizer.shouldOverrideDefaults(m);\r\n\t\t\tformatString = $D.normalizeFormat(m, context);\r\n\t\t\tif (formatString) {\r\n\t\t\t\treturn context.toString(formatString, override);\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\t$P._format = function (format) {\r\n\t\tvar formatter = formatReplace(this);\r\n\t\tif (!format) {\r\n\t\t\treturn this._toString();\r\n\t\t} else {\r\n\t\t\treturn format.replace(/(%|\\\\)?.|%%/g, formatter);\r\n\t\t}\r\n\t};\r\n\r\n\tif (!$P.format) {\r\n\t\t$P.format = $P._format;\r\n\t}\r\n}());"]},"metadata":{},"sourceType":"script"}